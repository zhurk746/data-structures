{"changed":true,"filter":false,"title":"week3new.js","tooltip":"/week3new.js","value":"\"use strict\"\n\n// dependencies\nconst fs = require('fs'),\n      querystring = require('querystring'),\n      request = require('request'),\n      async = require('async'),\n      dotenv = require('dotenv');\n\n// TAMU api key\ndotenv.config();\nconst API_KEY = process.env.TAMU_KEY;\nconst API_URL = 'geoservices.tamu.edu/Services/Geocode/WebService/GeocoderWebServiceHttpNonParsed_V04_01.aspx'\n\n\n// geocode addresses\nlet meetingsData = [];\nlet addresses = \"/week_03/Address.txt\"\n\n// eachSeries in the async module iterates over an array and operates on each item in the array in series\nasync.eachSeries(addresses, function(value, callback) {\n    let query = {\n        streetAddress: value,\n        city: \"New York\",\n        state: \"NY\",\n        apikey: API_KEY,\n        format: \"json\",\n        version: \"4.01\"\n    };\n//console.log(query);\n  //  })\n\n    //construct a querystring from the `query` object's values and append it to the api URL\n  /* async function getData () {\n        const response= await fetch(API_URL);\n        const location=await response.json();\n        console.log(location) */\n    \n    let apiRequest = API_URL + API_KEY + querystring.stringify(query);\nconsole.log(apiRequest);    \n\n\n    request(apiRequest, function(err, resp, body) {\n        if (err){ throw err; }\n//console.log(apiRequest)\n        let tamuGeo = JSON.parse(body);\n        console.log(tamuGeo['FeatureMatchingResultType'], apiRequest);\n        meetingsData.push(tamuGeo);\n});\n    })\n\n//this is where code breaks and Unhandle Promise Rejection Warning \n\n     /* sleep for a couple seconds before making the next request\n    setTimeout(callback, 2000);\n}, function() {\n    fs.writeFileSync('week_03/geoservices.json', JSON.stringify(meetingsData));\n    console.log('*** *** *** *** ***');\n    console.log(`Number of meetings in this zone: ${meetingsData.length}`);\n}); */\n","undoManager":{"mark":2,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":60,"column":0},"action":"insert","lines":["\"use strict\"","","// dependencies","const fs = require('fs'),","      querystring = require('querystring'),","      request = require('request'),","      async = require('async'),","      dotenv = require('dotenv');","","// TAMU api key","dotenv.config();","const API_KEY = process.env.TAMU_KEY;","const API_URL = 'geoservices.tamu.edu/Services/Geocode/WebService/GeocoderWebServiceHttpNonParsed_V04_01.aspx'","","","// geocode addresses","let meetingsData = [];","let addresses = \"/week_03/Address.txt\"","","// eachSeries in the async module iterates over an array and operates on each item in the array in series","async.eachSeries(addresses, function(value, callback) {","    let query = {","        streetAddress: value,","        city: \"New York\",","        state: \"NY\",","        apikey: API_KEY,","        format: \"json\",","        version: \"4.01\"","    };","//console.log(query);","  //  })","","    //construct a querystring from the `query` object's values and append it to the api URL","  /* async function getData () {","        const response= await fetch(API_URL);","        const location=await response.json();","        console.log(location) */","    ","    let apiRequest = API_URL + API_KEY + querystring.stringify(query);","console.log(apiRequest);    ","","","    request(apiRequest, function(err, resp, body) {","        if (err){ throw err; }","//console.log(apiRequest)","        let tamuGeo = JSON.parse(body);","        console.log(tamuGeo['FeatureMatchingResultType'], apiRequest);","        meetingsData.push(tamuGeo);","});","    })","","//this is where code breaks and Unhandle Promise Rejection Warning ","","     /* sleep for a couple seconds before making the next request","    setTimeout(callback, 2000);","}, function() {","    fs.writeFileSync('week_03/geoservices.json', JSON.stringify(meetingsData));","    console.log('*** *** *** *** ***');","    console.log(`Number of meetings in this zone: ${meetingsData.length}`);","}); */",""],"id":1}],[{"start":{"row":60,"column":0},"end":{"row":60,"column":1},"action":"insert","lines":["p"],"id":2},{"start":{"row":60,"column":1},"end":{"row":60,"column":2},"action":"insert","lines":["w"]}],[{"start":{"row":60,"column":1},"end":{"row":60,"column":2},"action":"remove","lines":["w"],"id":3},{"start":{"row":60,"column":0},"end":{"row":60,"column":1},"action":"remove","lines":["p"]}],[{"start":{"row":43,"column":30},"end":{"row":43,"column":31},"action":"insert","lines":["g"],"id":4},{"start":{"row":43,"column":31},"end":{"row":43,"column":32},"action":"insert","lines":["i"]},{"start":{"row":43,"column":32},"end":{"row":43,"column":33},"action":"insert","lines":["t"]}],[{"start":{"row":43,"column":33},"end":{"row":43,"column":34},"action":"insert","lines":[" "],"id":5}],[{"start":{"row":43,"column":33},"end":{"row":43,"column":34},"action":"remove","lines":[" "],"id":6},{"start":{"row":43,"column":32},"end":{"row":43,"column":33},"action":"remove","lines":["t"]},{"start":{"row":43,"column":31},"end":{"row":43,"column":32},"action":"remove","lines":["i"]},{"start":{"row":43,"column":30},"end":{"row":43,"column":31},"action":"remove","lines":["g"]}]]},"ace":{"folds":[],"scrolltop":688,"scrollleft":0,"selection":{"start":{"row":43,"column":30},"end":{"row":43,"column":30},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":42,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1600886198759}